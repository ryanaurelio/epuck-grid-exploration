Engineering Notebook

# 15th December 2021
* Check the physical condition of the robot.
* Try to turn on and off the robot.

# 21st December 2021
* Installed USB driver for Windows.
* Drivers already installed
* USB Serial (CDC) only has "Downgrade Driver" option
* USB serial ports:
  + (COM3) e-puck2 GDB Server
  + (COM4) e-puck2 Serial Monitor
  + (COM5) e-puck2 STM32F407
* PC interface not responding when trying to connect to COM5
* Following the steps from https://www.gctronic.com/doc/index.php?title=e-puck2_robot_side_development.
* Downloaded Eclipse IDE for e-puck2.
* Error when trying to build the project.
* Found a website for coding in python: https://www.giters.com/davidfrisch/UNIFR_API_EPUCK.
* Also considering another website for PC side development: https://www.gctronic.com/doc/index.php?title=e-puck2_PC_side_development.

# 22nd December 2021
* Re-build the project in Eclipse IDE without connecting to the robot.
* Project compiled successfully.
* Retry using PC interface.
* Success by setting the selector to 8.
* Trying the robot's sensors to detect multiple color of highlighters.
* e-puck2 doesn't react to any highlighter.
* In comparison to the e-puck in the webots, our e-puck doesn't have IR sensor at the bottom.

# 28th December 2021
* Ideas:
  (1) Map detection: Check algorithm for vacuum robot
      * First the robot will explore the area to make a map.
      * Map is known to all robots.
      * Start to explore.
  Problem:
  * Calculating the distance inside the area.
  * Creating a map:
    * The proximity of the distance

  (2) Image recognition: Using machine learning to replace floor sensors
      * Tapes are set across the map.
      * Robot only able to move on top of tape.
      * The goal is to have 100% tape coverage.
      Problems:
      * Refresh rate of the camera is very low.

# 2nd January 2022
* Connect via Bluetooth.
* Testing the PC interface via UART.
* Established connection with python.
* Print available commands.

# 4th January 2022
* Trying different commands from advanced sercom protocol: https://www.gctronic.com/doc/index.php/Advanced_sercom_protocol.
* Try to parse all sensors from advanced sercom v2.
* Temperature not available.
* No floor sensors.

# 5th January 2022
* Try to connect the E-puck with Wi-Fi.
* Try to update the firmware.
* GDB error.
* Check the Wi-Fi with executable from the website.
* Try to open Webots and ROS.
* Try to find out about the lag in Wi-Fi connection (the sound repeats itself after few notes, etc.).

# 6th January 2022
* Try to figure out about the lag.
* Try to connect Webots with e-puck.
* Program keep crashing when trying to input ipaddr (still no progress).
* Try to update ROS-hydro from the gctronic website, because it's no longer supported, but no available.
* Try to connect to older version of Webots, got the same result.
* Try to connect to Webots in ROS-hydro, but the app was very laggy in VM, tried to resolve this issue, but no available.
* Try to download ROS and install it manually, not yet done, considering need a great amount of time we needed and little time we have.

# 7th January 2022
* Idea for exploration algorithm:
  * Given a map as grid with border with obstacles, trs to cover the map.
  * Simple approach for exploration algorithm using "Flood Fill":
    * https://en.wikipedia.org/wiki/Flood_fill#Stack-based_recursive_implementation_(four-way)
  * Map generation using 1 robot first to explore using proximity sensors.

# 8th January 2022
* Define speed and sleep time for 1 step.
* Implement functions to step forward and backward for 1 unit step.
* Implement functions to turn left and right for 90Â°.
* Implement functions to move the robot to north, east, south, and west.
* Implement a function to parse a sequence of "WASD" to execute the corresponding move directions.
* Implement flood fill algorithm.

# 9th January 2022
* Implement class for Map.
* Able to initialize square map with height and width with border.
* Implement a function to set symbol for specific grid.
* Able to initialize map with a string describing map with "/" as new line.
* Define a Robot class for previous move commands implementation.
* Robot class contains direction.
* Algorithm done.

# 10th January 2022
* Idea: using a pathfinder to find the nearest unexplored area.

# 16th January 2022
* Implement main class to run the implemented functions.
* Start to implement the pathfinder algorithm.

# 17th January 2022
* Completed the algorithm for pathfinder.
* Implement the algorithm for single bot exploration.

# 18th - 20th January 2022
* Read the documentation for e-puck eclipse.

# 21st - 31st January 2022
* Tried to use different examples from e-puck wiki (https://www.gctronic.com/doc/index.php?title=e-puck2_robot_side_development).
* Some useful projects:
  * https://github.com/e-puck2/e-puck2_example_dsp
  * https://github.com/e-puck2/e-puck2_cpp
* Look for much more example projects on the web but nothing that we can use.

# 1st - 18th February 2022
* Translated the Python code to C++ to use it in eclipse.

# 19th - 25th February 2022
* Tried to use the C++ code with main.c.
* Build failed
* Fixed header files to link C++ with C.
* Successfully pushed to the robot.
* Robot doesn't behave the same as when using only C.

# 26th February - 3rd March 2022
* Tried to use MPLAB for Bluetooth connection.
* Can't build the project for bluetooth.
* Fix the dependencies for bluetooth library.
* Project compiled successfully.
* Tried to use the elf/bin program using tinyBootloader and gdc.
* Can't push elf or bin to robot.
* Can't find a way to use bluetooth for robot to robot communication.

# 4th - 7th March 2022
* Translated C++ code to C.
* Searched for possible communication method.
  * https://www.gctronic.com/doc/index.php/E-Puck#Bluetooth_Communication_Testing_-_robot_to_robot
  * https://jennyhasahat.github.io/soundboard.html (Here's stated that we need to find a workaround in order to communicate e-pucks with bluetooth)
* Decided to use sound for communication.

8th March 2022:
* Discussed how the robot should initialize themselves at the start of the communication.
* Discussed the encoding of the broadcasts (current position and done).
* Divide the frequency range for communication (11 classes with 100Hz each).

9th March 2022:
* The frequency is too small to handle sound noises (around +- 70Hz).
* Lower frequency sound such as car noises adds more noises to the lower part of the frequency range.
* Cut the frequency range below 1200Hz.
* Left with (5 classes with 200Hz each).

10th - 16th March:
* Implement the communication algorithm in C using frequency.
* Implement and fix some bugs for the exploration algorithm in C, so they can communicate with each other.
* Successfully communicate the map with each other.

17th March 2022:
* Tried to add the movement commands into the algorithm.
* Noises from the robot's body add more noises to the communication.
* Successfully simulate the exploration using soft surface (e.g. mouse pad).

18th March 2022:
* Tried to use a tape for the bumper so the robot won't make any sound when it stops.
* Didn't work because the vibration of the robot still creates a noise.
* Tried to use a rubber band as the bumper.
* Didn't work since the height difference between the body of the robot and the wheel are very small.
